import sys
import socket
import threading

# 1. Filter looks for ASCI Char '.' means if it doesn't exist
HEX_FILTER = ''.join(
    [(len(repr(chr(i))) == 3) and chr(i) or '.' for i in range(256)]) 

# 2. Get and decode the bytes that are passed in
def hexdump(src, lenght=16, show=True):
    if isinstance(src, bytes): 
        src = src.decode()

# 3. Grab a piece of string and dump into word variable
    results = list()
    for i in range(0, len(src), lenght):
        word = str(src[i:i+lenght]) 

# 4. Substitute the hex representation of the integer value of every char in raw string
        printable = word.translate(HEX_FILTER)
        hexa = ''.join([f'{ord(c):02X}' for c in word]) 
        hexwidth = lenght*3
        results.append(f'{i:04x} {hexa:<{hexwidth}} {printable}')
    if show:
        for line in results:
            print(line)
        else:
            return results

# 5. Increase timeot as neccessary depending on network latency and create a loop to read response data into buffer 
def receive_from(connection):
    buffer = b""
    connection.settimeout(5) 
    try:
        while True:
            data = connection.recv(4096)
            if not data:
                break
            buffer += data
    except Exception as e:
        pass
    return buffer

# 6. These two functions can be useful when we want ot modify the packets
def request_handler(buffer):
    return buffer
                                    
def response_handler(buffer):
    return buffer

# 7. Connect to remote host (ipv4 adn TCP)
def proxy_handler(client_socket, remote_host, remote_port, receive_first):
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port)) 

# 8. Check to make sure we don't need to initiate a connection ro remote host and request data, some servers do ths (SFTP sends a banner firs for example) and dump the packet content to instpect it
    if receive_first: 
        remote_buffer = receive_from(remote_socket) #accepts the connection
        hexdump(remote_buffer) 

# 10. Send received buffer to local client
    remote_buffer = response_handler(remote_buffer) 
    if len(remote_buffer):
        print("[<==] Sending %d byttes to localhost." % len(remote_buffer))
        client_socket.send(remote_buffer)

# 11. Loop that reads from the local client takes the data and sends it to the remote client untill there is no data nad than close                           
    while True:
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            line = "[==>] Received %d bytes fro mlocalhost." % len(local_buffer)
            print(line)
            hexdump(local_buffer)

            local_buffer = request_handler(local_buffer)
            remote_socket.send(local_buffer)
            print("[==>] Sent to remote.")

        remote_buffer = receive_from(remote_socket)                                 
        if len(remote_buffer):                                                      
            print("[<==] Received %d bytes from remote." % len(remote_buffer))    
            hexdump(remote_buffer)

            remote_buffer = response_handler(remote_buffer)
            client_socket.send(remote_buffer)
            print("[<==] Sent to localhost.")

        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print("[*] No more data. Closing connections.")
            break

# 12. Serverrr loop creates a Socket and than binds and listens

def server_loop(local_host, local_port, remote_host, remote_port, receive_first):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind((local_host, local_port))
    except Exception as e:
        print('problem on bind: %r' % e)

        print("[!!] Failed to listen on %s:%d" % (local_host, local_port))
        print("[!!] Check for other listening sockets or correct permissions.")
        sys.exit(0)

    print("[*] Listening on %s:%d" % (local_host, local_port))
    server.listen(5)

# 13. When a connection comes in it's being handed off to the "proxy_handler" in a new thread

    while True:
        client_socket, addr = server.accept()

# 14. print out the local connection information

        line = "> Received incoming connection form %s:%d" % (addr[0], addr[1])
        print(line)

# 15. Start a thread to talk to the remote host and perform all of the sending and receiving of the bits to both sides of the data stream

        proxy_thread = threading.Thread(target=proxy_handler, args=(client_socket, remote_host, remote_port, receive_first))
        proxy_thread.start()

# 16. Main function takes in commandline arguments and tht starts the server lop that listens for connections

def main():
    if len(sys.argv[1:]) !=5:
        print("Usage: ./proxy.py [localhost] [localport]", end='')
        print("[remotehost] [remoteport] [receive_first]")
        print("Example: ./proxy.py 127.0.0.1 9000 10.12.132.1 9000 True")
        sys.exit(0)
    local_host = sys.argv[1]
    local_port = int(sys.argv[2])
    remote_host = sys.argv[3]
    remote_port = int(sys.argv[4])

    receive_first = sys.argv[5]

    if "True" in receive_first:
        receive_first = True
    else:
        receive_first = False

    server_loop(local_host, local_port, remote_host, remote_port, receive_first)

if __name__ == '__main__':
    main()
